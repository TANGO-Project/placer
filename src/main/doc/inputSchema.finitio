# Copyright 2017 CETIC www.cetic.be
# This is being developed for the TANGO Project: http://tango-project.eu
#
# Placer is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Placer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License  for more details.
#
# You should have received a copy of the GNU Lesser General Public License along with Placer.
# If not, see http://www.gnu.org/licenses/lgpl-3.0.en.html

@import finitio/data

#definition of the JSon input format of Placer tool
#this document describes the format "PlacerBeta5"
#uses the finitio language: http://www.finitio.io/

HardwareModel = {
    name: String
    processingElements: [ProcessingElement]
    busses: [Bus]
    properties: [NameValue]
}

ProcessingElement = {
    processorClass: ProcessingElementClassRef
    name: String
    memSize: Integer
    resources:[NameValue]
    properties:[NameValue]
    powerModel:Formula
    multiCore:?Integer
    switchingDelay:?Integer
}

ProcessingElementRef = String

Bus = {halfDuplexBus:HalfDuplexBus}|{singleWayBus:SingleWayBus}

HalfDuplexBus = {
    name:String
    relatedProcessors:[ProcessingElementRef]
    timeUnitPerDataUnit:Integer
    latency:Integer
}

SingleWayBus = {
    name:String
    from:[ProcessingElementRef]
    to:[ProcessingElementRef]
    timeUnitPerDataUnit:Integer
    latency:Integer
}

ProcessingElementClass =
    {switchingTask:SwitchingTaskClass} | {multiTaskPermanentTasks:MultiTaskPermanentTasksClass}

SwitchingTaskClass = {
    name: String
    resources: [String]
    properties: [String]
    switchingDelay: Integer
}

MultiTaskPermanentTasksClass ={
    name:String
    resources: [String]
    properties: [String]
}

NameValue = {
    name: String
    value: Integer
}

NameFormula = {
    name:String
    formula:Formula
}


SoftwareModel =  {
    sharedPermanentFunctions:?[Implementation]
    tasks:[Task]
    transmissions:[Transmission]
    softwareClass:SoftwareClass
    properties:?[NameValue]
}

Task = {
    name:String
    implementations:[Implementation]
    sharedImplementation:?[SharedImplementationRef]
}

TaskRef = String

SharedImplementationRef = String

Implementation = {
    name:String
    target:ProcessingElementClassRef
    parameters:[ParameterDefinition]
    resourceUsage:[NameFormula]
    computationMemory:Formula
    duration:Formula
    nbThreads:?Formula
}



ProcessingElementClassRef = String

#example: buzy*mflops*30+5
#Formulas are built on identifiers, and operators
#identifiers are all identifiers in the scope of the formula:
#if the formula is defined in an implementation, it can refer to attribute of the implementation, attribute of the target processing element class global properties of the hardware
#if the formula is defined in a ProcessingElement, it can refer to resources and properties of teh processing element, including memSize (a default system attribute) and buzy for MonoTaskSwitchingTask processing elements
#operators include: + - * / () and integer literals
Formula = String

ParameterDefinition = {
    name:String
    values:[Integer]
}

Transmission = {
    name:String
    source:TaskRef
    target:TaskRef
    size:Integer
    timing:TransmissionTimingConstraint
}


TransmissionTimingConstraint = String #asap | free | alap

SoftwareClass = String #"iterativeSoftware" | "oneShotSoftware"




TaskPE = {
    task:TaskRef
    processingElement:ProcessingElementRef
}

ConstraintOrObjective =
     {mustBeUsed:ProcessingElementRef}
   | {mustNotBeUsed:ProcessingElementRef}
   | {samePE:[TaskRef]}
   | {notSamePE:[TaskRef]}
   | {
        symmetricPE:[ProcessingElementRef]
        breaking:?String #("workLoad" | "longTask")
      }
   | {symmetricTasks:[TaskRef]}
   | {runOn:TaskPE}
   | {notRunOn:TaskPE}
   | {powerCap:Integer}
   | {energyCap:Integer}
   | {maxMakespan:Integer}
   | {multiObjective:MultiObjectiveGoal}
   | {simpleObjective:SimpleGoal}

#there should be at most one objective; which might be either multiObjective or simpleObjective
SimpleGoal = String #"minMakeSpan" | "minEnergy" | "minFrame"

MultiObjectiveGoal = {
    a:SimpleGoal
    b:SimpleGoal
}


#this is the main structure
{
    info:?String
    jsonFormat:String
    timeUnit:String
    dataUnit:String
    processingElementClasses:[ProcessingElementClass]
    hardwareModel:HardwareModel
    softwareModel:SoftwareModel
    properties:?[NameValue]
    constraintsAndObjectives:?[ConstraintOrObjective]
}

