# Copyright 2017 CETIC www.cetic.be
# This is being developed for the TANGO Project: http://tango-project.eu
#
# Placer is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Placer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License  for more details.
#
# You should have received a copy of the GNU Lesser General Public License along with Placer.
# If not, see http://www.gnu.org/licenses/lgpl-3.0.en.html

@import finitio/data
#definition of the JSon input format in finitio: http://www.finitio.io/

HardwareModel = {
    name:String
    powerCap:?Integer
    energyCap:?Integer
    processingElements:[ProcessingElement]
    busses:[Bus]
    properties:[NameValue]
}

ProcessingElement = {
    processorClass:ProcessingElementClassRef
    name:String
    memSize:Integer
    resources:[NameValue]
    properties:[NameValue]
    powerModel:Formula
    multiCore:?Int
    switchingDelay:?Integer
}

Bus = {halfDuplexBus:HalfDuplexBus}|{singleWayBus:SingleWayBus}

HalfDuplexBus = {
    name:String
    relatedProcessors:[ProcessingElementRef]
    timeUnitPerDataUnit:Integer
    latency:Integer
}

SingleWayBus = {
    name:String
    from:[ProcessingElementRef]
    to:[ProcessingElementRef]
    timeUnitPerDataUnit:Integer
    latency:Integer
}

#referencing a processing element that is declared in HardwareModel/processingElements
ProcessingElementRef = String

NameValue = {
    name:String
    value:Integer
}

ProcessingElementClass =
    {switchingTask:switchingTaskClass}
    | {multiTaskPermanentTasks:MultiTaskPermanentTasksClass}

switchingTaskClass = {
    name:String
    resources:[String]
    properties:[String]
}

MultiTaskPermanentTasksClass ={
    name:String
    resources:[String]
    properties:[String]
}

SoftwareModel =  {
    sharedPermanentFunctions:[Implementation]
    simpleProcesses:[SimpleProcess]
    transmissions:[Transmission]
    softwareClass:SoftwareClass
    properties:?[NameValue]
}

SimpleProcess = {
    name:String
    implementations:[Implementation]
    sharedImplementation:[SharedImplementationRef]
}

SharedImplementationRef = String

Implementation = {
    name:String
    target:ProcessingElementClassRef
    parameters:[ParameterDefinition]
    resourceUsage:[NameFormula]
    computationMemory:Formula
    duration:Formula
    nbThreads:?Formula
}

NameFormula = {
    name:String
    formula:Formula
}

#referencing a processing element class that is declared in HardwareModel/processingElementClasses
ProcessingElementClassRef = String

#example: buzy*mflops*30+5
#Formulas are built on identifiers, and operators
#identifiers are all identifiers in the scope of the formula:
#if the formula is defined in an implementation, it can refer to attribute of the implementation, attribute of the target processing element class global properties of the hardware
#if the formula is defined in a ProcessingElement, it can refer to resources and properties of teh processing element, including memSize (a default system attribute) and buzy for MonoTaskSwitchingTask processing elements
#operators include: + - * / () and integer literals
Formula = String

ParameterDefinition = {
    name:String
    values:[Integer]
}

Transmission = {
    name:String
    source:SimpleProcessRef
    target:SimpleProcessRef
    size:Integer
    timing:TransmissionTimingConstraint
}

#Asap,Free,Alap
TransmissionTimingConstraint = String

SimpleProcessRef = String

SoftwareClass =
    {iterativeSoftware:IterativeSoftware}
    | {oneShotSoftware:OneShotSoftware}

IterativeSoftware={
    maxFrameDelay:?Integer
    maxMakespan:?Integer
}

OneShotSoftware = {
    maxMakespan:?Integer
}

TaskPE = {
    task:String
    processingElement:String
}

Constraint = {mustBeUsed:String}
   | {mustNotBeUsed:String}
   | {samePE:[String]}
   | {notSamePE:[String]}
   | {symmetricPE:[String]}
   | {runOn:TaskPE}
   | {notRunOn:TaskPE}
   | MappingGoal

MappingGoal =
    {multiObjective:MultiObjectiveGoal}
    | {simpleObjective:SimpleGoal}

#minMakeSpan,minEnergy,minFrame
SimpleGoal = String

MultiObjectiveGoal = {
    a:SimpleGoal
    b:SimpleGoal
}

#jsonFormat documents the version of the Json file used.
#this document describes the format "PlacerBeta3"

Main = {
    info:?String
    jsonFormat:String
    timeUnit:String
    dataUnit:String
    processingElementClasses:[ProcessingElementClass]
    hardwareModel:HardwareModel
    softwareModel:SoftwareModel
    properties:?[NameValue]
    constraintsAndObjectives:?[Constraint]
}
