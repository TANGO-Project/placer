 minimize(makespan) search {
    binaryFirstFail(resources) ++ binaryFirstFail(starts)
  }

-----------------------------

 splitLastConflict(starts ++ resources, i => i)

-------------------------------

  setTimes(startsVar, durationsVar, endsVar)
   setTimes(startVarsFlat, durationVarsFlat, endVarsFlat,i => -endVarsFlat(i).min)


----------------------------------

search(conflictOrderingSearch(startsVar,startsVar(_).min,startsVar(_).min))

----------------------------------

  import oscar.algo.search._

  def myCustomBranching(w: Array[CPIntVar]) = Branching {
    // Minimum x position
    selectMin(w)(x => !x.isBound)(_.min) match {
      case None => noAlternative
      case Some(z) => {
        val v = z.min
        branch(post(z === v))(post(z !== v))
      }
    }
  }

  search { myCustomBranching(startsX) ++ myCustomBranching(startsY) }

-----------------------------------------

 binaryFirstFail(starts) ++ binaryFirstFail(Seq(capacity))
 binaryFirstFail(resources) ++ binaryFirstFail(starts)

 --------------------------------
 --------------------------------
 --------------------------------
